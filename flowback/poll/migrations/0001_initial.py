# Generated by Django 4.2.7 on 2024-12-13 13:57

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import flowback.comment.services
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('comment', '0001_initial'),
        ('schedule', '0001_initial'),
        ('files', '0001_initial'),
        ('chat', '0002_initial'),
        ('group', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('poll_type', models.IntegerField(choices=[(1, 'ranking'), (2, 'for_against'), (3, 'schedule'), (4, 'cardinal'), (1001, 'vote')])),
                ('quorum', models.IntegerField(default=51, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('approval_minimum', models.PositiveIntegerField(default=51, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('finalization_period', models.PositiveIntegerField(default=3, help_text='Finalization period in days', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('finalization_period_start_date', models.DateTimeField(blank=True, default=None, help_text='Datetime when finalization period began', null=True)),
                ('pinned', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('public', models.BooleanField(default=False)),
                ('allow_fast_forward', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField()),
                ('area_vote_end_date', models.DateTimeField(blank=True, null=True)),
                ('proposal_end_date', models.DateTimeField(blank=True, null=True)),
                ('prediction_statement_end_date', models.DateTimeField(blank=True, null=True)),
                ('prediction_bet_end_date', models.DateTimeField(blank=True, null=True)),
                ('delegate_vote_end_date', models.DateTimeField(blank=True, null=True)),
                ('vote_end_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField()),
                ('blockchain_id', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('status', models.IntegerField(default=0)),
                ('result', models.BooleanField(default=False)),
                ('participants', models.IntegerField(default=0)),
                ('dynamic', models.BooleanField()),
                ('attachments', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='files.filecollection')),
                ('comment_section', models.ForeignKey(default=flowback.comment.services.comment_section_create_model_default, on_delete=django.db.models.deletion.DO_NOTHING, to='comment.commentsection')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('message_channel_topic', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='chat.messagechanneltopic')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='poll.poll')),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='group.grouptags')),
            ],
        ),
        migrations.CreateModel(
            name='PollAreaStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollDelegateVoting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mandate', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuserdelegatepool')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
        ),
        migrations.CreateModel(
            name='PollPredictionStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(max_length=2000)),
                ('end_date', models.DateTimeField()),
                ('combined_bet', models.DecimalField(blank=True, decimal_places=7, max_digits=8, null=True)),
                ('blockchain_id', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('participants', models.IntegerField(blank=True, null=True)),
                ('blank_votes', models.IntegerField(blank=True, null=True)),
                ('positive_votes', models.IntegerField(blank=True, null=True)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('blockchain_id', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('attachments', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='files.filecollection')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollVoting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
            options={
                'unique_together': {('created_by', 'poll')},
            },
        ),
        migrations.CreateModel(
            name='PollTypeSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('poll', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
                ('schedule', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='schedule.schedule')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollProposalTypeSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='schedule.scheduleevent')),
                ('proposal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
        ),
        migrations.CreateModel(
            name='PollProposalPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('group_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
        ),
        migrations.CreateModel(
            name='PollPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.IntegerField(validators=[django.core.validators.MinValueValidator(-1), django.core.validators.MaxValueValidator(1)])),
                ('group_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.poll')),
            ],
        ),
        migrations.CreateModel(
            name='PollPredictionStatementVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vote', models.BooleanField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('prediction_statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollpredictionstatement')),
            ],
        ),
        migrations.CreateModel(
            name='PollPredictionStatementSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_true', models.BooleanField()),
                ('prediction_statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollpredictionstatement')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollPredictionBet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('score', models.IntegerField(validators=[django.core.validators.MaxValueValidator(5), django.core.validators.MinValueValidator(0)])),
                ('blockchain_id', models.PositiveIntegerField(blank=True, default=None, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('prediction_statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollpredictionstatement')),
            ],
        ),
        migrations.CreateModel(
            name='PollPhaseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('poll_type', models.IntegerField(choices=[(1, 'ranking'), (2, 'for_against'), (3, 'schedule'), (4, 'cardinal'), (1001, 'vote')])),
                ('poll_is_dynamic', models.BooleanField(default=False)),
                ('area_vote_time_delta', models.IntegerField(blank=True, null=True)),
                ('proposal_time_delta', models.IntegerField(blank=True, null=True)),
                ('prediction_statement_time_delta', models.IntegerField(blank=True, null=True)),
                ('prediction_bet_time_delta', models.IntegerField(blank=True, null=True)),
                ('delegate_vote_time_delta', models.IntegerField(blank=True, null=True)),
                ('vote_time_delta', models.IntegerField(blank=True, null=True)),
                ('end_time_delta', models.IntegerField()),
                ('created_by_group_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
            ],
        ),
        migrations.CreateModel(
            name='PollAreaStatementVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vote', models.BooleanField()),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.groupuser')),
                ('poll_area_statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollareastatement')),
            ],
        ),
        migrations.CreateModel(
            name='PollAreaStatementSegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('poll_area_statement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollareastatement')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='group.grouptags')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PollVotingTypeRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('priority', models.IntegerField()),
                ('score', models.IntegerField(default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.pollvoting')),
                ('author_delegate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.polldelegatevoting')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'unique_together': {('author_delegate', 'proposal'), ('author', 'priority'), ('author_delegate', 'priority'), ('author', 'proposal')},
            },
        ),
        migrations.CreateModel(
            name='PollVotingTypeForAgainst',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vote', models.BooleanField()),
                ('score', models.IntegerField(default=0)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.pollvoting')),
                ('author_delegate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.polldelegatevoting')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'unique_together': {('author_delegate', 'proposal'), ('author', 'proposal')},
            },
        ),
        migrations.CreateModel(
            name='PollVotingTypeCardinal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_score', models.IntegerField(default=0)),
                ('score', models.IntegerField(blank=True, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.pollvoting')),
                ('author_delegate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='poll.polldelegatevoting')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poll.pollproposal')),
            ],
            options={
                'unique_together': {('author_delegate', 'proposal'), ('author', 'proposal')},
            },
        ),
        migrations.AddConstraint(
            model_name='pollproposaltypeschedule',
            constraint=models.UniqueConstraint(fields=('proposal', 'event'), name='unique_proposaltypeschedule'),
        ),
        migrations.AddConstraint(
            model_name='pollproposalpriority',
            constraint=models.UniqueConstraint(fields=('group_user', 'proposal'), name='unique_poll_proposal_priority'),
        ),
        migrations.AddConstraint(
            model_name='pollpriority',
            constraint=models.UniqueConstraint(fields=('group_user', 'poll'), name='unique_poll_priority'),
        ),
        migrations.AlterUniqueTogether(
            name='pollpredictionstatementvote',
            unique_together={('prediction_statement', 'created_by')},
        ),
        migrations.AlterUniqueTogether(
            name='pollpredictionbet',
            unique_together={('prediction_statement', 'created_by')},
        ),
        migrations.AddConstraint(
            model_name='pollphasetemplate',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('poll_type', 4), ('poll_is_dynamic', False)), models.Q(models.Q(('area_vote_time_delta__isnull', False), ('proposal_time_delta__isnull', False), ('prediction_statement_time_delta__isnull', False), ('prediction_bet_time_delta__isnull', False), ('delegate_vote_time_delta__isnull', False), ('vote_time_delta__isnull', False), ('end_time_delta__isnull', False), _connector='OR'), _negated=True)), _negated=True), name='pollphasetemplatecardinalisvalid_check'),
        ),
        migrations.AddConstraint(
            model_name='pollphasetemplate',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('poll_type', 3), ('poll_is_dynamic', True), _connector='OR'), models.Q(('area_vote_time_delta__isnull', True), ('proposal_time_delta__isnull', True), ('prediction_statement_time_delta__isnull', True), ('prediction_bet_time_delta__isnull', True), ('delegate_vote_time_delta__isnull', True), ('vote_time_delta__isnull', False), ('end_time_delta__isnull', False), _connector='OR')), _negated=True), name='pollphasetemplatescheduleordynamicisvalid_check'),
        ),
        migrations.AlterUniqueTogether(
            name='polldelegatevoting',
            unique_together={('created_by', 'poll')},
        ),
        migrations.AlterUniqueTogether(
            name='pollareastatementvote',
            unique_together={('created_by', 'poll_area_statement')},
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('area_vote_end_date__isnull', True), ('area_vote_end_date__gte', models.F('start_date')), _connector='OR')), name='areavoteenddategreaterthanstartdate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('proposal_end_date__isnull', True), ('proposal_end_date__gte', models.F('area_vote_end_date')), _connector='OR')), name='proposalenddategreaterthanareavoteenddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('prediction_statement_end_date__isnull', True), ('prediction_statement_end_date__gte', models.F('proposal_end_date')), _connector='OR')), name='predictionstatementenddategreaterthanproposalenddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('prediction_bet_end_date__isnull', True), ('prediction_bet_end_date__gte', models.F('prediction_statement_end_date')), _connector='OR')), name='predictionbetenddategreaterthanpredictionstatementeneddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('delegate_vote_end_date__isnull', True), ('delegate_vote_end_date__gte', models.F('prediction_bet_end_date')), _connector='OR')), name='delegatevoteenddategreaterthanpredictionbetenddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('vote_end_date__isnull', True), ('vote_end_date__gte', models.F('delegate_vote_end_date')), _connector='OR')), name='voteenddategreaterthandelegatevoteenddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('end_date__isnull', True), ('end_date__gte', models.F('vote_end_date')), _connector='OR')), name='enddategreaterthanvoteenddate_check'),
        ),
        migrations.AddConstraint(
            model_name='poll',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('poll_type', 3), ('dynamic', False)), _negated=True), name='polltypeisscheduleanddynamic_check'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='pollvotingtyperanking',
            trigger=pgtrigger.compiler.Trigger(name='protects_author_or_author_delegate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN ((NEW."author_id" IS NULL AND NEW."author_delegate_id" IS NULL) OR (NEW."author_id" IS NOT NULL AND NEW."author_delegate_id" IS NOT NULL))', func="RAISE EXCEPTION 'pgtrigger: Cannot insert or update rows from % table', TG_TABLE_NAME;", hash='b475740f10a35f5a575603f5bc855550b0888c29', operation='INSERT OR UPDATE', pgid='pgtrigger_protects_author_or_author_delegate_c765f', table='poll_pollvotingtyperanking', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='pollvotingtypeforagainst',
            trigger=pgtrigger.compiler.Trigger(name='protects_author_or_author_delegate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN ((NEW."author_id" IS NULL AND NEW."author_delegate_id" IS NULL) OR (NEW."author_id" IS NOT NULL AND NEW."author_delegate_id" IS NOT NULL))', func="RAISE EXCEPTION 'pgtrigger: Cannot insert or update rows from % table', TG_TABLE_NAME;", hash='20d230b97a5408ec7601f37319a875065a0b826a', operation='INSERT OR UPDATE', pgid='pgtrigger_protects_author_or_author_delegate_4ba2a', table='poll_pollvotingtypeforagainst', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='pollvotingtypecardinal',
            trigger=pgtrigger.compiler.Trigger(name='protects_author_or_author_delegate', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN ((NEW."author_id" IS NULL AND NEW."author_delegate_id" IS NULL) OR (NEW."author_id" IS NOT NULL AND NEW."author_delegate_id" IS NOT NULL))', func="RAISE EXCEPTION 'pgtrigger: Cannot insert or update rows from % table', TG_TABLE_NAME;", hash='ec44deeb2a748d7a328fdfb52721e57f51925dd4', operation='INSERT OR UPDATE', pgid='pgtrigger_protects_author_or_author_delegate_7b6b6', table='poll_pollvotingtypecardinal', when='BEFORE')),
        ),
    ]
